base {
	log_debug = off;
	log_info = off;
	log = "syslog:daemon";

	daemon = on;

	user = redsocks;
	group = redsocks;

	redirector = iptables;
}

redsocks {
	local_ip = 127.0.0.1;
	local_port = 31338;

	ip = 192.168.99.1; // change here
	port = 8080; // change here

	type = socks5;
}

redudp {
	local_ip = 127.0.0.1;
	local_port = 10053;

	ip = 157.230.0.251; // change here
	port = 8080; // change here

	dest_ip = 1.1.1.1;
	dest_port = 53;

	udp_timeout = 30;
	udp_timeout_stream = 180;
}

dnstc {
	local_ip = 127.0.0.1;
	local_port = 5300;
}
I only changed the fields ip and port in the redtcp and redudp sections.

You can see that the redirector setting indicates the use of iptables. We therefor have to create a special ruleset that will redirect the outgoing traffic into redsocks, which in turn sends the traffic to the SOCKS proxy.

Create a file called /etc/iptables/redsocks.rules with:

# Transparent SOCKS proxy
# See: http://darkk.net.ru/redsocks/

*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
:REDSOCKS - [0:0]

# Redirect all output through redsocks
-A OUTPUT -d XXX.XXX.XXX.XXX -j ACCEPT
-A OUTPUT -d 192.168.99.1 -j ACCEPT
-A OUTPUT -p tcp -j REDSOCKS

# Whitelist LANs and some other reserved addresses.
# https://en.wikipedia.org/wiki/Reserved_IP_addresses#Reserved_IPv4_addresses
-A REDSOCKS -d 0.0.0.0/8 -j RETURN
-A REDSOCKS -d 10.0.0.0/8 -j RETURN
-A REDSOCKS -d 127.0.0.0/8 -j RETURN
-A REDSOCKS -d 169.254.0.0/16 -j RETURN
-A REDSOCKS -d 172.16.0.0/12 -j RETURN
#-A REDSOCKS -d 192.168.0.0/16 -j RETURN
-A REDSOCKS -d 224.0.0.0/4 -j RETURN
-A REDSOCKS -d 240.0.0.0/4 -j RETURN

# Redirect everything else to redsocks port
-A REDSOCKS -p tcp -j REDIRECT --to-ports 31338

COMMIT
